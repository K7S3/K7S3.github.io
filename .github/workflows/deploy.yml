name: Deploy to GitHub Pages with Gemini API

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Debug Environment
      run: |
        echo "üîç Environment Debug Information:"
        echo "  - Repository: ${{ github.repository }}"
        echo "  - Environment: github-pages"
        echo "  - Actor: ${{ github.actor }}"
        echo "  - Event: ${{ github.event_name }}"
        
    - name: Inject Gemini API Key
      run: |
        echo "üîë Injecting Gemini API key..."
        
        # Check if secret is available
        if [ -n "${{ secrets.GEMINI_API_KEY }}" ]; then
          echo "‚úÖ API key found, injecting into configuration..."
          
          # Method 1: Replace placeholder in gemini-config-dev.js
          sed -i "s/YOUR_GEMINI_API_KEY_HERE/${{ secrets.GEMINI_API_KEY }}/g" gemini-config-dev.js
          
          # Method 2: Create gemini-config.js
          echo "// Production Gemini API Configuration - Generated by GitHub Actions" > gemini-config.js
          echo "window.GEMINI_API_KEY = '${{ secrets.GEMINI_API_KEY }}';" >> gemini-config.js
          echo "console.log('üöÄ Gemini API key loaded from GitHub Actions');" >> gemini-config.js
          echo "console.log('‚úÖ Production AI responses enabled');" >> gemini-config.js
          
          # Method 3: Also inject directly into index.html as backup
          sed -i 's|<script src="gemini-config-dev.js"></script>|<script>window.GEMINI_API_KEY = "${{ secrets.GEMINI_API_KEY }}"; console.log("üîë API key injected directly");</script>\n    <script src="gemini-config-dev.js"></script>|g' index.html
          
          echo "üìÅ Verification:"
          echo "  - API key injected in gemini-config-dev.js: $(grep -c '${{ secrets.GEMINI_API_KEY }}' gemini-config-dev.js || echo '0')"
          echo "  - gemini-config.js created: $(test -f gemini-config.js && echo 'YES' || echo 'NO')"
          echo "  - index.html updated: $(grep -c 'API key injected directly' index.html || echo '0')"
          
        else
          echo "‚ùå No API key found in secrets"
          echo "Creating fallback configuration..."
          
          # Create fallback config
          echo "window.GEMINI_API_KEY = null;" > gemini-config.js
          echo "console.log('‚ö†Ô∏è No API key - using fallback responses');" >> gemini-config.js
        fi
        
        echo "‚úÖ Configuration completed"

    - name: Verify API Key Injection
      run: |
        echo "üîç Final verification..."
        echo "Files present:"
        ls -la gemini-config* index.html | head -10
        
        echo ""
        echo "gemini-config.js contents:"
        if [ -f gemini-config.js ]; then
          cat gemini-config.js | sed 's/AIza[a-zA-Z0-9_-]*/AIza****HIDDEN****/g'
        else
          echo "‚ùå gemini-config.js not found"
        fi
        
        echo ""
        echo "API key check in gemini-config-dev.js:"
        if grep -q "YOUR_GEMINI_API_KEY_HERE" gemini-config-dev.js; then
          echo "‚ö†Ô∏è Placeholder still present in gemini-config-dev.js"
        else
          echo "‚úÖ Placeholder replaced in gemini-config-dev.js"
        fi

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4 