name: Deploy to GitHub Pages with Gemini API

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Debug Environment and Secrets
      run: |
        echo "üîç Environment Debug Information:"
        echo "Environment: ${{ github.environment }}"
        echo "Repository: ${{ github.repository }}"
        echo "Ref: ${{ github.ref }}"
        echo "Event: ${{ github.event_name }}"
        
        # Check if secret is available (without exposing it)
        if [ -z "${{ secrets.GEMINI_API_KEY }}" ]; then
          echo "‚ùå GEMINI_API_KEY secret is EMPTY or NOT ACCESSIBLE"
          echo "üîß Troubleshooting:"
          echo "   1. Check that the secret exists in Settings > Environments > github-pages"
          echo "   2. Verify the secret name is exactly 'GEMINI_API_KEY'"
          echo "   3. Ensure this job has the correct environment configuration"
          echo "   4. The secret might be in repository secrets instead of environment secrets"
          echo ""
          echo "‚ö†Ô∏è  Will continue with fallback deployment (chatbot will use basic responses)"
          echo "SECRET_ACCESSIBLE=false" >> $GITHUB_ENV
        else
          echo "‚úÖ GEMINI_API_KEY secret is accessible"
          echo "üîë Secret length: $(echo '${{ secrets.GEMINI_API_KEY }}' | wc -c) characters"
          echo "SECRET_ACCESSIBLE=true" >> $GITHUB_ENV
        fi

    - name: Inject Gemini API Key
      run: |
        # Check if we determined the secret is accessible
        if [ "$SECRET_ACCESSIBLE" = "true" ]; then
          echo "üöÄ Starting API key injection..."
          
          # Store the API key in a variable for easier handling
          API_KEY="${{ secrets.GEMINI_API_KEY }}"
          
          if [ -z "$API_KEY" ]; then
            echo "‚ùå Failed to retrieve API key from secrets despite accessibility check"
            echo "‚ö†Ô∏è  Proceeding with fallback deployment"
          else
            # Method 1: Create the standalone JavaScript file
            echo "window.GEMINI_API_KEY = '$API_KEY';" > gemini-config.js
            echo "console.log('üöÄ Gemini API key loaded from GitHub Actions');" >> gemini-config.js
            
            # Method 2: Replace placeholder in gemini-config-dev.js
            sed -i "s/YOUR_GEMINI_API_KEY_HERE/$API_KEY/g" gemini-config-dev.js
            
            # Method 3: Inject directly into a script tag in index.html
            sed -i "/<script src=\"gemini-config-dev.js\"><\/script>/a\\    <script>window.GEMINI_API_KEY_INJECTED = \"$API_KEY\";<\/script>" index.html
            
            # Verify all injection methods worked
            echo "‚úÖ API Key Injection Verification:"
            
            # Check Method 1
            if [ -f "gemini-config.js" ] && grep -q "window.GEMINI_API_KEY" gemini-config.js; then
              echo "üìÅ Method 1 (gemini-config.js): SUCCESS"
            else
              echo "‚ùå Method 1 (gemini-config.js): FAILED"
            fi
            
            # Check Method 2
            if grep -q "$API_KEY" gemini-config-dev.js; then
              echo "üîÑ Method 2 (gemini-config-dev.js): SUCCESS"
            else
              echo "‚ùå Method 2 (gemini-config-dev.js): FAILED"
            fi
            
            # Check Method 3
            if grep -q "GEMINI_API_KEY_INJECTED" index.html; then
              echo "üìÑ Method 3 (inline script): SUCCESS"
            else
              echo "‚ùå Method 3 (inline script): FAILED"
            fi
            
            # Show first few characters of API key for verification (security: only first 10 chars)
            echo "üîë API Key verification (first 10 chars): $(echo $API_KEY | cut -c1-10)..."
            
            echo "üéâ API key injection process completed!"
          fi
        else
          echo "‚ö†Ô∏è  Secret not accessible - deploying without API key injection"
          echo "üìù Creating fallback gemini-config.js..."
          
          # Create a fallback file that indicates no API key is available
          echo "window.GEMINI_API_KEY = null;" > gemini-config.js
          echo "console.log('‚ö†Ô∏è  No API key available - using fallback responses');" >> gemini-config.js
          
          echo "‚úÖ Fallback deployment prepared"
        fi

    - name: Verify Files Before Upload
      run: |
        echo "üìã Final Verification Before Upload:"
        echo "üìÅ Files that will be uploaded:"
        ls -la gemini-config.js index.html gemini-config-dev.js 2>/dev/null || echo "Some files missing"
        
        echo "üîç Checking deployment configuration:"
        if [ "$SECRET_ACCESSIBLE" = "true" ]; then
          echo "üîë Expected: Full AI-powered chatbot with API key"
          if grep -q "window.GEMINI_API_KEY" gemini-config.js 2>/dev/null; then
            echo "‚úÖ gemini-config.js contains API key"
          else
            echo "‚ùå gemini-config.js missing or no API key"
          fi
          
          if grep -q "GEMINI_API_KEY_INJECTED" index.html 2>/dev/null; then
            echo "‚úÖ index.html contains inline API key script"
          else
            echo "‚ùå index.html missing inline API key script"
          fi
        else
          echo "‚ö†Ô∏è  Expected: Basic chatbot with fallback responses"
          if grep -q "window.GEMINI_API_KEY = null" gemini-config.js 2>/dev/null; then
            echo "‚úÖ gemini-config.js configured for fallback mode"
          else
            echo "‚ùå gemini-config.js not properly configured for fallback"
          fi
        fi
        
        echo "üöÄ Ready for deployment!"

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4 