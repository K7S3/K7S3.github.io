name: Deploy to GitHub Pages with Gemini API

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Debug Environment
      run: |
        echo "üîç Environment Debug Information:"
        echo "  - Repository: ${{ github.repository }}"
        echo "  - Environment: github-pages"
        echo "  - Actor: ${{ github.actor }}"
        echo "  - Event: ${{ github.event_name }}"
        
    - name: Check Secret Access
      run: |
        echo "üîê Checking repository secret access..."
        if [ -z "${{ secrets.GEMINI_API_KEY }}" ]; then
          echo "‚ùå GEMINI_API_KEY secret not accessible"
          echo "üí° Please ensure:"
          echo "  1. Secret is named exactly 'GEMINI_API_KEY'"
          echo "  2. Secret is set at repository level (not environment level)"
          echo "  3. Secret value is not empty"
          exit 1
        else
          echo "‚úÖ GEMINI_API_KEY secret is accessible"
          echo "üìè Secret length: ${#GEMINI_API_KEY} characters"
        fi
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        
    - name: Inject Gemini API Key
      run: |
        echo "üîë Injecting Gemini API key into application..."
        
        # Create gemini-config.js with the API key
        echo "// Production Gemini API Configuration" > gemini-config.js
        echo "// Generated by GitHub Actions during deployment" >> gemini-config.js
        echo "window.GEMINI_API_KEY = '${{ secrets.GEMINI_API_KEY }}';" >> gemini-config.js
        echo "console.log('üöÄ Gemini API key loaded from GitHub Actions');" >> gemini-config.js
        echo "console.log('‚úÖ AI responses enabled');" >> gemini-config.js
        
        # Update gemini-config-dev.js for consistency
        sed -i "s/YOUR_GEMINI_API_KEY_HERE/${{ secrets.GEMINI_API_KEY }}/g" gemini-config-dev.js
        
        # Verify files
        echo "üìÅ File verification:"
        echo "  - gemini-config.js exists: $(test -f gemini-config.js && echo 'YES' || echo 'NO')"
        echo "  - gemini-config.js size: $(wc -c < gemini-config.js) bytes"
        echo "  - API key properly injected: $(grep -q 'window.GEMINI_API_KEY' gemini-config.js && echo 'YES' || echo 'NO')"
        
        # Show first line of config file (without exposing full API key)
        echo "  - Config file preview: $(head -n 1 gemini-config.js | sed 's/AIza[a-zA-Z0-9_-]*/AIza****HIDDEN****/g')"
        
        echo "‚úÖ API key injection completed successfully"

    - name: Create Fallback Config (if secret failed)
      if: failure()
      run: |
        echo "‚ö†Ô∏è Creating fallback configuration..."
        echo "// Fallback Gemini API Configuration" > gemini-config.js
        echo "window.GEMINI_API_KEY = null;" >> gemini-config.js
        echo "console.log('‚ö†Ô∏è No API key available - using fallback responses');" >> gemini-config.js
        echo "console.log('üí° To enable AI responses, configure GEMINI_API_KEY secret');" >> gemini-config.js

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: '.'

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4 